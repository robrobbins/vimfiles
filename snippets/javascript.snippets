# JSDoc stub
snippet jsd
	/**
	 * ${1}
	 */
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:arguments}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet afun
	function(${1}) {${2}}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet tern
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet meth
	${1:method_name}: function $1(${2:args}) {
		${4};
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# try ... catch
snippet try
	try {
		${1}
	} catch(${2:err}) {
		${3}
	}
# Jasmine suite description
snippet describe
	describe('${1:thing}', function() {
		it('${2:does_some_stuff}', function() {
			${3}	
		});	
	});
# Jasmine it statement
snippet it
	it('${1:does_some_stuff}', function() {
		${2}	
	});
# Jasmine SpyOn statement
snippet spyOn
	spyOn(${1:Object}, ${2:method});
# Jasmine beforeEach statement
snippet beforeEach
	beforeEach(function() {
		${1:do_some_stuff}	
	});
# _template snippets
snippet eval
	{{ ${1} }}
snippet interp
	{{= ${1} }}
snippet escape
	{{- ${1} }}
